"""
Script : check_integrity_json.py
But : V√©rifier l'int√©grit√© d'un fichier JSON MongoDB avant migration
Auteur : GPT-5 (Assistant Python)

D√©finition d‚Äôun doublon :
    - M√™me Name (insensible √† la casse)
    - Age √† ¬±7 ans
    - M√™me Gender, Blood Type, Doctor, Hospital, Billing Amount, Date of Admission
"""

import pandas as pd
import numpy as np
import os
import sys

# === CONFIGURATION ===
FICHIER_JSON = "../data/FirstTry.medic2.json"  # Fichier JSON MongoDB


# === 1. Chargement du fichier JSON ===
def charger_json(fichier):
    """Charge un fichier JSON (MongoDB export) et retourne un DataFrame pandas."""
    if not os.path.exists(fichier):
        print(f"‚ùå Erreur : Le fichier '{fichier}' est introuvable.")
        sys.exit(1)

    try:
        df = pd.read_json(fichier, lines=True)
    except ValueError:
        try:
            df = pd.read_json(fichier)
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement du JSON : {e}")
            sys.exit(1)
    return df


# === 2. V√©rification des colonnes ===
def verifier_colonnes(df):
    """Affiche la liste des colonnes et leur type."""
    print("\nüìä Colonnes disponibles et types de donn√©es :")
    print(df.dtypes)
    print(f"\nNombre total de colonnes : {len(df.columns)}")


# === 3. V√©rification des valeurs manquantes ===
def verifier_valeurs_manquantes(df):
    """V√©rifie la pr√©sence de valeurs manquantes."""
    print("\nüîç V√©rification des valeurs manquantes :")
    missing = df.isnull().sum()
    total_missing = missing.sum()

    if total_missing == 0:
        print("‚úÖ Aucune valeur manquante d√©tect√©e.")
    else:
        print(f"‚ö†Ô∏è Valeurs manquantes d√©tect√©es dans {sum(missing > 0)} colonnes :")
        print(missing[missing > 0])


# === 4. V√©rification des types mixtes ===
def verifier_types_mixtes(df):
    """D√©tecte les colonnes contenant des types de donn√©es mixtes."""
    print("\nüß© V√©rification des colonnes √† types mixtes :")
    mixed_cols = []
    for col in df.columns:
        types_uniques = df[col].map(type).nunique()
        if types_uniques > 1:
            mixed_cols.append(col)

    if mixed_cols:
        print(f"‚ö†Ô∏è Colonnes avec types mixtes : {mixed_cols}")
        print("   ‚Üí Recommandation : uniformiser les types (ex: int ‚Üí str)")
    else:
        print("‚úÖ Aucune colonne √† types mixtes d√©tect√©e.")


# === 5. D√©tection avanc√©e de doublons ===
def verifier_doublons_personnalises(df):
    """
    V√©rifie les doublons selon les crit√®res personnalis√©s :
    - Name (insensible √† la casse)
    - Age √† ¬±7 ans
    - Gender, Blood Type, Doctor, Hospital, Billing Amount, Date of Admission
    """
    print("\nüß¨ V√©rification des doublons personnalis√©s :")

    # Colonnes requises
    required_cols = [
        "Name", "Age", "Gender", "Blood Type",
        "Doctor", "Hospital", "Billing Amount", "Date of Admission"
    ]

    for col in required_cols:
        if col not in df.columns:
            print(f"‚ö†Ô∏è Colonne manquante : {col}. Impossible de d√©tecter les doublons.")
            return

    # Normalisation du nom pour comparaison insensible √† la casse
    df["_norm_name"] = df["Name"].astype(str).str.strip().str.lower()

    doublons = []
    df_sorted = df.sort_values(by="_norm_name").reset_index()

    for i in range(len(df_sorted)):
        for j in range(i + 1, len(df_sorted)):
            row_i = df_sorted.loc[i]
            row_j = df_sorted.loc[j]

            # Si noms diff√©rents, on peut casser la boucle car tri√© par nom
            if row_j["_norm_name"] != row_i["_norm_name"]:
                break

            # Comparaison selon crit√®res
            if (
                abs(row_i["Age"] - row_j["Age"]) <= 7
                and row_i["Gender"] == row_j["Gender"]
                and row_i["Blood Type"] == row_j["Blood Type"]
                and row_i["Doctor"] == row_j["Doctor"]
                and row_i["Hospital"] == row_j["Hospital"]
                and row_i["Billing Amount"] == row_j["Billing Amount"]
                and row_i["Date of Admission"] == row_j["Date of Admission"]
            ):
                doublons.append((row_i["Name"], row_i["Age"], row_j["Age"], row_i["Hospital"]))

    if doublons:
        print(f"‚ö†Ô∏è {len(doublons)} doublon(s) potentiel(s) d√©tect√©(s) :")
        for d in doublons[:10]:  # Affiche les 10 premiers
            print(f"   ‚Üí {d[0]} (√¢ges {d[1]} et {d[2]}) √† {d[3]}")
        print("   ‚Üí Recommandation : examiner et fusionner les doublons si n√©cessaire.")
    else:
        print("‚úÖ Aucun doublon personnalis√© d√©tect√©.")

    # Nettoyage colonne temporaire
    df.drop(columns=["_norm_name"], inplace=True, errors="ignore")




# === 7. Main ===
def main():
    print("=== üßæ V√©rification d'int√©grit√© JSON avant migration MongoDB ===")

    df = charger_json(FICHIER_JSON)
    print(f"\n‚úÖ Fichier charg√© avec succ√®s : {FICHIER_JSON}")
    print(f"‚Üí {df.shape[0]} lignes, {df.shape[1]} colonnes")

    verifier_colonnes(df)
    verifier_valeurs_manquantes(df)
    verifier_types_mixtes(df)
    verifier_doublons_personnalises(df)

    print("\nüéØ V√©rification termin√©e !")


if __name__ == "__main__":
    main()
